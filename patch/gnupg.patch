--- g10/armor.c
+++ g10/armor.c
@@ -1156,7 +1156,7 @@
 	      }
 
 	    /* write the comment strings */
-	    for(s=comment->d;comment;comment=comment->next,s=comment->d)
+	    for(s=comment?comment->d:NULL;comment;comment=comment->next,s=comment->d)
 	      {
 		iobuf_writestr(a, "Comment: " );
 		for( ; *s; s++ )
--- g10/keylist.c
+++ g10/keylist.c
@@ -1611,8 +1611,8 @@
           char *issuer_fpr = NULL;
           char *reason_text = NULL;
           char *reason_comment = NULL;
-          size_t reason_commentlen;
-          int reason_code;
+          size_t reason_commentlen = 0;
+          int reason_code = 0;
 
 	  if (sig->sig_class == 0x20 || sig->sig_class == 0x28
 	      || sig->sig_class == 0x30)
--- tests/gpgscm/scheme.c
+++ tests/gpgscm/scheme.c
@@ -172,6 +172,7 @@
      case T_FRAME: return "frame";
      }
      assert (! "not reached");
+     return "unknown";
 }
 
 /* ADJ is enough slack to align cells in a TYPE_BITS-bit boundary */
--- sm/certdump.c
+++ sm/certdump.c
@@ -692,9 +692,13 @@
       gpg_err_set_errno (c->error);
       return -1;
     }
-  memcpy (p + c->len, buffer, size);
-  c->len += size;
-  p[c->len] = 0; /* Terminate string. */
+
+  if (p + c->len && buffer)
+    {
+      memcpy (p + c->len, buffer, size);
+      c->len += size;
+      p[c->len] = 0; /* Terminate string. */
+    }
 
   return (gpgrt_ssize_t)size;
 }
--- m4/iconv.m4
+++ m4/iconv.m4
@@ -68,11 +68,12 @@
 #include <string.h>
 int main ()
 {
+  iconv_t cd;
   /* Test against AIX 5.1 bug: Failures are not distinguishable from successful
      returns.  */
   {
-    iconv_t cd_utf8_to_88591 = iconv_open ("ISO8859-1", "UTF-8");
-    if (cd_utf8_to_88591 != (iconv_t)(-1))
+    cd = iconv_open ("ISO8859-1", "UTF-8");
+    if (cd != (iconv_t)(-1))
       {
         static const char input[] = "\342\202\254"; /* EURO SIGN */
         char buf[10];
@@ -80,9 +81,10 @@
         size_t inbytesleft = strlen (input);
         char *outptr = buf;
         size_t outbytesleft = sizeof (buf);
-        size_t res = iconv (cd_utf8_to_88591,
+        size_t res = iconv (cd,
                             (char **) &inptr, &inbytesleft,
                             &outptr, &outbytesleft);
+        iconv_close(cd);
         if (res == 0)
           return 1;
       }
@@ -90,8 +92,8 @@
 #if 0 /* This bug could be worked around by the caller.  */
   /* Test against HP-UX 11.11 bug: Positive return value instead of 0.  */
   {
-    iconv_t cd_88591_to_utf8 = iconv_open ("utf8", "iso88591");
-    if (cd_88591_to_utf8 != (iconv_t)(-1))
+    cd = iconv_open ("utf8", "iso88591");
+    if (cd != (iconv_t)(-1))
       {
         static const char input[] = "\304rger mit b\366sen B\374bchen ohne Augenma\337";
         char buf[50];
@@ -99,9 +101,10 @@
         size_t inbytesleft = strlen (input);
         char *outptr = buf;
         size_t outbytesleft = sizeof (buf);
-        size_t res = iconv (cd_88591_to_utf8,
+        size_t res = iconv (cd,
                             (char **) &inptr, &inbytesleft,
                             &outptr, &outbytesleft);
+        iconv_close(cd);
         if ((int)res > 0)
           return 1;
       }
@@ -110,14 +113,15 @@
   /* Test against HP-UX 11.11 bug: No converter from EUC-JP to UTF-8 is
      provided.  */
   if (/* Try standardized names.  */
-      iconv_open ("UTF-8", "EUC-JP") == (iconv_t)(-1)
+      (cd = iconv_open ("UTF-8", "EUC-JP")) == (iconv_t)(-1)
       /* Try IRIX, OSF/1 names.  */
-      && iconv_open ("UTF-8", "eucJP") == (iconv_t)(-1)
+      && (cd = iconv_open ("UTF-8", "eucJP")) == (iconv_t)(-1)
       /* Try AIX names.  */
-      && iconv_open ("UTF-8", "IBM-eucJP") == (iconv_t)(-1)
+      && (cd = iconv_open ("UTF-8", "IBM-eucJP")) == (iconv_t)(-1)
       /* Try HP-UX names.  */
-      && iconv_open ("utf8", "eucJP") == (iconv_t)(-1))
+      && (cd = iconv_open ("utf8", "eucJP")) == (iconv_t)(-1))
     return 1;
+  iconv_close(cd);
   return 0;
 }], [am_cv_func_iconv_works=yes], [am_cv_func_iconv_works=no],
         [case "$host_os" in
--- configure
+++ configure
@@ -11704,11 +11704,12 @@
 #include <string.h>
 int main ()
 {
+  iconv_t cd;
   /* Test against AIX 5.1 bug: Failures are not distinguishable from successful
      returns.  */
   {
-    iconv_t cd_utf8_to_88591 = iconv_open ("ISO8859-1", "UTF-8");
-    if (cd_utf8_to_88591 != (iconv_t)(-1))
+    cd = iconv_open ("ISO8859-1", "UTF-8");
+    if (cd != (iconv_t)(-1))
       {
         static const char input[] = "\342\202\254"; /* EURO SIGN */
         char buf[10];
@@ -11716,9 +11717,10 @@
         size_t inbytesleft = strlen (input);
         char *outptr = buf;
         size_t outbytesleft = sizeof (buf);
-        size_t res = iconv (cd_utf8_to_88591,
+        size_t res = iconv (cd,
                             (char **) &inptr, &inbytesleft,
                             &outptr, &outbytesleft);
+        iconv_close (cd);
         if (res == 0)
           return 1;
       }
@@ -11726,8 +11728,8 @@
 #if 0 /* This bug could be worked around by the caller.  */
   /* Test against HP-UX 11.11 bug: Positive return value instead of 0.  */
   {
-    iconv_t cd_88591_to_utf8 = iconv_open ("utf8", "iso88591");
-    if (cd_88591_to_utf8 != (iconv_t)(-1))
+    cd = iconv_open ("utf8", "iso88591");
+    if (cd != (iconv_t)(-1))
       {
         static const char input[] = "\304rger mit b\366sen B\374bchen ohne Augenma\337";
         char buf[50];
@@ -11735,9 +11737,10 @@
         size_t inbytesleft = strlen (input);
         char *outptr = buf;
         size_t outbytesleft = sizeof (buf);
-        size_t res = iconv (cd_88591_to_utf8,
+        size_t res = iconv (cd,
                             (char **) &inptr, &inbytesleft,
                             &outptr, &outbytesleft);
+        iconv_close (cd);
         if ((int)res > 0)
           return 1;
       }
@@ -11746,14 +11749,15 @@
   /* Test against HP-UX 11.11 bug: No converter from EUC-JP to UTF-8 is
      provided.  */
   if (/* Try standardized names.  */
-      iconv_open ("UTF-8", "EUC-JP") == (iconv_t)(-1)
+      (cd = iconv_open ("UTF-8", "EUC-JP")) == (iconv_t)(-1)
       /* Try IRIX, OSF/1 names.  */
-      && iconv_open ("UTF-8", "eucJP") == (iconv_t)(-1)
+      && (cd = iconv_open ("UTF-8", "eucJP")) == (iconv_t)(-1)
       /* Try AIX names.  */
-      && iconv_open ("UTF-8", "IBM-eucJP") == (iconv_t)(-1)
+      && (cd = iconv_open ("UTF-8", "IBM-eucJP")) == (iconv_t)(-1)
       /* Try HP-UX names.  */
-      && iconv_open ("utf8", "eucJP") == (iconv_t)(-1))
+      && (cd = iconv_open ("utf8", "eucJP")) == (iconv_t)(-1))
     return 1;
+  iconv_close(cd);
   return 0;
 }
 _ACEOF
